(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{330:function(e,t,s){e.exports=s.p+"assets/img/nullability.dd7156b1.png"},396:function(e,t,s){"use strict";s.r(t);var a=s(46),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"schema-design"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#schema-design"}},[e._v("#")]),e._v(" 🎨 Schema Design")]),e._v(" "),a("p",[e._v("The GraphQL Schema is global to the whole of Yelp engineering. Ultimately, we\nwant to be able to model the whole of Yelp's user facing business data in\nGraphQL. This page contains guidance on how we're thinking about this, in an\neffort to present a clean, usable and scalable schema.")]),e._v(" "),a("p",[e._v("Before going any further, it's highly encouraged to skim over\n"),a("a",{attrs:{href:"https://graphql.org/learn/schema/",target:"_blank",rel:"noopener noreferrer"}},[e._v("the official docs"),a("OutboundLink")],1),e._v(" on this subject to\nunderstand how the schema works.")]),e._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[e._v("Why do we care about this?")]),e._v(" "),a("p",[e._v("The schema (for now) is\n"),a("a",{attrs:{href:"https://graphql.org/learn/best-practices/#versioning",target:"_blank",rel:"noopener noreferrer"}},[e._v("versionless"),a("OutboundLink")],1),e._v(". Adding\nbad types and making breaking changes can be costly, and best avoided.\nFollowing this guide will help our schema stay in good shape!")])]),e._v(" "),a("p",[a("strong",[e._v("Contents")])]),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#types-of-types"}},[e._v("Types of types")])]),a("li",[a("a",{attrs:{href:"#keep-the-top-level-queries-to-a-minimum"}},[e._v("Keep the top level queries to a minimum")])]),a("li",[a("a",{attrs:{href:"#be-specific-when-naming-types"}},[e._v("Be specific when naming types")])]),a("li",[a("a",{attrs:{href:"#don-t-namespace-the-fields"}},[e._v("Don't namespace the fields")])]),a("li",[a("a",{attrs:{href:"#describe-the-data-not-the-view"}},[e._v("Describe the data, not the view")])]),a("li",[a("a",{attrs:{href:"#link-via-types-not-ids"}},[e._v("Link via types, not IDs")])]),a("li",[a("a",{attrs:{href:"#use-existing-standardized-types-and-scalars"}},[e._v("Use existing standardized types and scalars")])]),a("li",[a("a",{attrs:{href:"#group-related-fields-together"}},[e._v("Group related fields together")])]),a("li",[a("a",{attrs:{href:"#use-triple-quotes-for-descriptions"}},[e._v("Use triple quotes for descriptions")])]),a("li",[a("a",{attrs:{href:"#space-out-field-descriptions"}},[e._v("Space out field descriptions")])]),a("li",[a("a",{attrs:{href:"#be-super-explicit-with-comments-and-descriptions"}},[e._v("Be super explicit with comments and descriptions")])]),a("li",[a("a",{attrs:{href:"#use-nullable-for-most-object-fields-by-default-but-there-are-many-exceptions"}},[e._v("Use nullable for most object fields by default, but there are many exceptions")])])])]),a("p"),e._v(" "),a("h2",{attrs:{id:"types-of-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#types-of-types"}},[e._v("#")]),e._v(" Types of types")]),e._v(" "),a("p",[e._v("In general, we have two types of "),a("em",[e._v("types")]),e._v(" at Yelp 😃 You should consider what\ntype of type you're adding:")]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("Core types")])]),e._v(" "),a("p",[e._v("Things like "),a("code",[e._v("Business")]),e._v(", "),a("code",[e._v("User")]),e._v(" etc. These are types that are common to many\npages, teams or components at Yelp.")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Domain specific types")])]),e._v(" "),a("p",[e._v("These are types that would only be used in one or a handful of\ncomponents/teams. Examples would be "),a("code",[e._v("BusinessClaimability")]),e._v(" or\n"),a("code",[e._v("EventsPageLeftRailAttendWidget")])])])]),e._v(" "),a("p",[e._v("Thinking about types in this way helps us communicate and establish ownership.\nFor example, this helps us decide:")]),e._v(" "),a("ul",[a("li",[e._v("How much scrutiny should be applied in schema change code reviews")]),e._v(" "),a("li",[e._v("What's the impact if a resolver starts consistently failing")])]),e._v(" "),a("p",[e._v("Core types are the most widely used, and at the root of many queries.\nAs such, they generally have a higher bar for meeting our schema guidelines, and\nany runtime issues should be triaged urgently.")]),e._v(" "),a("h2",{attrs:{id:"keep-the-top-level-queries-to-a-minimum"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keep-the-top-level-queries-to-a-minimum"}},[e._v("#")]),e._v(" Keep the top level queries to a minimum")]),e._v(" "),a("p",[e._v("As much as possible, we want to model Yelp data as a tree, with Core Types as\nthe root nodes. Before adding a new top level query, consider if it makes more\nsense to add it as an attribute of an existing type instead.")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("Why?")])]),e._v(" "),a("p",[e._v("This helps keep our schema easier to read through at the top level, and aims\nto keep how the data is organized consistent.")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Example")])]),e._v(" "),a("p",[e._v("Instead of adding "),a("code",[e._v("canClaimBusiness")]),e._v(" as a top level query under "),a("code",[e._v("root")]),e._v(", this\ncan be an attribute ("),a("code",[e._v("claimability")]),e._v(") on the existing "),a("code",[e._v("Business")]),e._v(" type.")])])]),e._v(" "),a("h2",{attrs:{id:"be-specific-when-naming-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#be-specific-when-naming-types"}},[e._v("#")]),e._v(" Be specific when naming types")]),e._v(" "),a("p",[e._v("Be specific with the naming of types. Namespace as much as possible (within\nreason)!")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("Why?")])]),e._v(" "),a("p",[e._v("It helps disambiguate what types are relevant to other types, and reduces\nnaming collisions. (e.g. is "),a("code",[e._v("Price")]),e._v(" the price range for a business? Or the\nticket price for a Yelp event? Or something else?!)")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Example")])]),e._v(" "),a("p",[e._v("Prefer "),a("code",[e._v("BusinessCategory")]),e._v(" instead of "),a("code",[e._v("Category")])])])]),e._v(" "),a("h2",{attrs:{id:"don-t-namespace-the-fields"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#don-t-namespace-the-fields"}},[e._v("#")]),e._v(" Don't namespace the fields")]),e._v(" "),a("p",[e._v("As an addendum to the above, "),a("em",[e._v("fields")]),e._v(" don't need to be overly specific/namespaced.")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("Why?")])]),e._v(" "),a("p",[e._v("Fields are already implicitly namespaced by the "),a("em",[e._v("type")]),e._v(" that they're a field\nof. In other words, you always know what the parent type is in the context of\na field name. (By contrast, a Type could be returned by anyone - you don't\nknow what field name will return it.)")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Example")])]),e._v(" "),a("p",[e._v("Instead of")]),e._v(" "),a("div",{staticClass:"language-graphql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BusinessAddress")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("\n  Formatted stringy version of address based on locale\n  It reflects a new line using a new line character\n  Example: 196 N Pleasant St\\nAmherst, MA 01002\n  ")]),e._v('"""')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("formattedBusinessAddress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token scalar"}},[e._v("String")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("Prefer:")]),e._v(" "),a("div",{staticClass:"language-graphql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BusinessAddress")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("\n  Formatted stringy version of address based on locale\n  It reflects a new line using a new line character\n  Example: 196 N Pleasant St\\nAmherst, MA 01002\n  ")]),e._v('"""')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("formatted")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token scalar"}},[e._v("String")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[a("em",[e._v('(An exception to this may be for fields on the root types (Query, Mutation, Subscription). Such "top level" fields are global, and probably still want to\nbe namespaced.)')])])])]),e._v(" "),a("h2",{attrs:{id:"describe-the-data-not-the-view"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#describe-the-data-not-the-view"}},[e._v("#")]),e._v(" Describe the data, not the view")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("Why?")])]),e._v(" "),a("blockquote",[a("p",[a("em",[e._v("Make sure that your API isn't linked too closely with the demands of your initial\ninterface. If you're building an API for an iOS app, you might later port it to\nother devices such as desktop computers or feature phones. When building queries,\nfocus on the underlying data, rather than how it's represented in your application.")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.graphql.com/articles/4-years-of-graphql-lee-byron",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.graphql.com/articles/4-years-of-graphql-lee-byron"),a("OutboundLink")],1)])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Example")])]),e._v(" "),a("p",[e._v("Put in Yelpy terms; don't add a \"UserProfileCard\" type to return down the data\nto render a user's information in a Profile component.")]),e._v(" "),a("p",[e._v("Instead, use the existing "),a("code",[e._v("User")]),e._v(" type and return that to populate the Profile\ncard component.")])])]),e._v(" "),a("h2",{attrs:{id:"link-via-types-not-ids"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#link-via-types-not-ids"}},[e._v("#")]),e._v(" Link via types, not IDs")]),e._v(" "),a("p",[e._v("When referencing one type from another, link directly to the type.")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("Why?")])]),e._v(" "),a("p",[e._v("This allows developers greater flexibility when fetching data. If you only\nprovide the ID of the thing you're linking to, that means the browser has to\nmake a follow up query to fetch data about that entity.")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Example")])]),e._v(" "),a("p",[e._v("Instead of")]),e._v(" "),a("div",{staticClass:"language-graphql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Review")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("\n  ID of the business that this review is about\n  ")]),e._v('"""')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("businessId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token scalar"}},[e._v("Int")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("Prefer")]),e._v(" "),a("div",{staticClass:"language-graphql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Review")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("\n  The business that this review is about\n  ")]),e._v('"""')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("business")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Business")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])])])]),e._v(" "),a("h2",{attrs:{id:"use-existing-standardized-types-and-scalars"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use-existing-standardized-types-and-scalars"}},[e._v("#")]),e._v(" Use existing standardized types and scalars")]),e._v(" "),a("p",[e._v("We have existing standardized types for representing:")]),e._v(" "),a("ul",[a("li",[e._v("Photos")]),e._v(" "),a("li",[e._v("Dates / Times")])]),e._v(" "),a("p",[e._v("Use these when representing such information.")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("Why?")])]),e._v(" "),a("p",[e._v("These types allow us to standardize how we model and consume common data types\nacross the schema. This lets us avoid duplication of work and concepts.")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Example")])]),e._v(" "),a("p",[e._v("Instead of")]),e._v(" "),a("div",{staticClass:"language-graphql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Review")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("\n  A photo that the user uploaded with this review\n  ")]),e._v('"""')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("uploadedPhotoUrl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token scalar"}},[e._v("String")]),e._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("\n  When was this review posted?\n  ")]),e._v('"""')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("createdAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token scalar"}},[e._v("String")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("Prefer")]),e._v(" "),a("div",{staticClass:"language-graphql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Review")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("\n  A photo that the user uploaded with this review\n  ")]),e._v('"""')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("uploadedPhoto")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BusinessPhoto")]),e._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("\n  When was this review posted?\n  ")]),e._v('"""')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("createdAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("DateTime")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])])])]),e._v(" "),a("h2",{attrs:{id:"group-related-fields-together"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#group-related-fields-together"}},[e._v("#")]),e._v(" Group related fields together")]),e._v(" "),a("p",[e._v("Err on the side of grouping related fields together under a new type. Don't be\nafraid of adding nesting to the schema!")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("Why?")])]),e._v(" "),a("p",[e._v("We want to reduce the bloat on our core types like "),a("code",[e._v("Business")]),e._v(" and "),a("code",[e._v("User")]),e._v(". We\nprefer to keep the number of fields on core types to a minimum, to aid the\ndiscoverability of existing related fields by subgrouping them under a\ncommon prefix. (Imagine scrolling through the docs sidebar over\n"),a("em",[e._v("hundreds")]),e._v(" of fields in GraphiQL!)")]),e._v(" "),a("p",[e._v("In turn, better discoverability can help us avoid accidentally adding\nduplicate fields elsewhere in the schema.")]),e._v(" "),a("p",[e._v("If you are starting off with a new type and aren't sure whether it needs to\nbe subgrouped yet or not, consider "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)",target:"_blank",rel:"noopener noreferrer"}},[e._v("the rule of three"),a("OutboundLink")],1),e._v(". It's\nOK to add it directly to the type to "),a("em",[e._v("start")]),e._v(" with - and if you find yourself\nneeding to add other related types in the future, deprecate it and migrate\nover to this new pattern.")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Example")])]),e._v(" "),a("p",[e._v("Instead of")]),e._v(" "),a("div",{staticClass:"language-graphql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("extend")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Business")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("\n  Is this business an advertiser with us?\n  ")]),e._v('"""')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("isAdvertiser")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token scalar"}},[e._v("Boolean")]),e._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("\n  How many times have users clicked this business's advertisement\n  ")]),e._v('"""')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("adClicks")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Number")]),e._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("\n  Amount of estimated revenue the business has earned from a campaign\n  ")]),e._v('"""')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("revenueFromCampaign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Number")]),e._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("\n  Search keywords that we should ads for this business on\n  ")]),e._v('"""')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("adKeywords")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token scalar"}},[e._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("Prefer")]),e._v(" "),a("div",{staticClass:"language-graphql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BusinessAdvertising")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("\n  Is this business an advertiser with us?\n  ")]),e._v('"""')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("isAdvertiser")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token scalar"}},[e._v("Boolean")]),e._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("\n  How many times have users clicked this business's advertisement\n  ")]),e._v('"""')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("clicks")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Number")]),e._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("\n  Amount of estimated revenue the business has earned from a campaign\n  ")]),e._v('"""')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("revenueFromCampaign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Number")]),e._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("\n  Search keywords that we should ads for this business on\n  ")]),e._v('"""')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("keywords")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token scalar"}},[e._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("extend")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Business")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("\n  Information related to our Business Advertising product\n  ")]),e._v('"""')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("advertising")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BusinessAdvertising")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("This can (and should!) be broken up even further with time, should the types\ngrow even more.")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Prior art")])]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/Shopify/graphql-design-tutorial/blob/master/TUTORIAL.md#rules-and-subobjects",target:"_blank",rel:"noopener noreferrer"}},[e._v('"Group closely-related fields together into subobjects"'),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://www.apollographql.com/blog/graphql-schema-design-building-evolvable-schemas-1501f3c59ed5",target:"_blank",rel:"noopener noreferrer"}},[e._v('"Prefer Object Types over simpler structures"'),a("OutboundLink")],1)])])])]),e._v(" "),a("h2",{attrs:{id:"use-triple-quotes-for-descriptions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use-triple-quotes-for-descriptions"}},[e._v("#")]),e._v(" Use triple quotes for descriptions")]),e._v(" "),a("p",[e._v("When adding descriptions to fields, use triple quotes ("),a("code",[e._v('"""')]),e._v("). Don't use "),a("code",[e._v("#")]),e._v(".")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("Why?")])]),e._v(" "),a("p",[e._v("There are two ways of adding comments in GraphQL - quotes ("),a("code",[e._v('"""like this"""')]),e._v(")\nand hashtags ("),a("code",[e._v("# like this")]),e._v("). "),a("a",{attrs:{href:"https://github.com/graphql/graphql-spec/issues/420#issuecomment-371279317",target:"_blank",rel:"noopener noreferrer"}},[e._v("They are syntactically different however."),a("OutboundLink")],1)]),e._v(" "),a("p",[a("code",[e._v('"""this is a description"""')]),e._v(" are "),a("em",[e._v("descriptions")]),e._v(", and should be used\nto document fields and types.")]),e._v(" "),a("p",[a("code",[e._v("# this is a comment")]),e._v(" syntax is ignored by the parser and should not\nbe used for schema documentation.")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Example")])]),e._v(" "),a("p",[e._v("Instead of")]),e._v(" "),a("div",{staticClass:"language-graphql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("extend")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Business")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# The name of the business (e.g. "The French Laundry")')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token scalar"}},[e._v("String")]),e._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("The rating of the business")]),e._v('"')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("rating")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token scalar"}},[e._v("Float")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("Prefer")]),e._v(" "),a("div",{staticClass:"language-graphql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("extend")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Business")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v('\n  The name of the business (e.g. "The French Laundry")\n  ')]),e._v('"""')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token scalar"}},[e._v("String")]),e._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("\n  The rating of the business\n  ")]),e._v('"""')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("rating")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token scalar"}},[e._v("Float")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])])])]),e._v(" "),a("h2",{attrs:{id:"space-out-field-descriptions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#space-out-field-descriptions"}},[e._v("#")]),e._v(" Space out field descriptions")]),e._v(" "),a("p",[e._v("When adding multiple fields and descriptions, space them out! (i.e. newlines\nbetween stanzas)")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("Why?")])]),e._v(" "),a("p",[e._v("Readability!")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Example")])]),e._v(" "),a("p",[e._v("Instead of")]),e._v(" "),a("div",{staticClass:"language-graphql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("YelpProsEntryPointBanner")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("Yelp Pros logo image url")]),e._v('"')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("logoUrl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token scalar"}},[e._v("String")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("Part of the heading for the banner - starting part")]),e._v('"')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("headingStart")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token scalar"}},[e._v("String")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("Part of the heading for the banner - ending part")]),e._v('"')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("headingEnd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token scalar"}},[e._v("String")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("Sub heading of the banner")]),e._v('"')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("subHeading")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token scalar"}},[e._v("String")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("Prefer")]),e._v(" "),a("div",{staticClass:"language-graphql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("YelpProsEntryPointBanner")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token directive function"}},[e._v("@owners")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("teams")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"services-marketplace"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("\n  Yelp Pros logo image url\n  ")]),e._v('"""')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("logoUrl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token scalar"}},[e._v("String")]),e._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("\n  Part of the heading for the banner - starting part\n  ")]),e._v('"""')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("headingStart")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token scalar"}},[e._v("String")]),e._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("\n  Part of the heading for the banner - ending part\n  ")]),e._v('"""')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("headingEnd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token scalar"}},[e._v("String")]),e._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("\n  Sub heading of the banner\n  ")]),e._v('"""')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("subHeading")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token scalar"}},[e._v("String")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])])])]),e._v(" "),a("h2",{attrs:{id:"be-super-explicit-with-comments-and-descriptions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#be-super-explicit-with-comments-and-descriptions"}},[e._v("#")]),e._v(" Be super explicit with comments and descriptions")]),e._v(" "),a("p",[e._v("Provide as much context as you can about type, field, parameter etc you’re\nadding. Describe concepts "),a("a",{attrs:{href:"https://fs.blog/2018/04/first-principles",target:"_blank",rel:"noopener noreferrer"}},[e._v("from first principles"),a("OutboundLink")],1),e._v(" where\napplicable.")]),e._v(" "),a("p",[e._v("Some examples of things to think about:")]),e._v(" "),a("ul",[a("li",[e._v("Clear description of "),a("em",[e._v("what")]),e._v(" the thing being added is")]),e._v(" "),a("li",[e._v("Avoid any team-specific acronyms")]),e._v(" "),a("li",[e._v("Describe all enum values so we know what the different options represent")]),e._v(" "),a("li",[e._v("Permalink to sources of truth that define or document the data/concept")])]),e._v(" "),a("p",[e._v("Pretend a newhire is reading the schema, and the only context they have is just\nwhat you wrote. Do they have enough information to know how to use it, given\nyour comments alone?")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("Why?")])]),e._v(" "),a("p",[e._v("Don’t assume everyone in the future using the new schema you just wrote has the\nsame knowledge you do! Put yourself in the shoes of a newhire - you’d want as\nmuch context as possible in order to understand what the schema is\nrepresenting, in order to be able to use it 😃")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Example")])]),e._v(" "),a("p",[e._v("Instead of")]),e._v(" "),a("div",{staticClass:"language-graphql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("extend")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Business")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("\n  Return a list of Yelfies, given a yelfieType\n  ")]),e._v('"""')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("getYelfies")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# yelfie type")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("yelfieType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token scalar"}},[e._v("String")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Yelfie")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("Prefer")]),e._v(" "),a("div",{staticClass:"language-graphql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-graphql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("extend")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Business")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("\n  Return a list of Yelfies.\n\n  A Yelfie is a user photo taken at a business, with some special filters\n  applied. See y/yelfies for more info about this feature.\n  ")]),e._v('"""')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property-query"}},[e._v("getYelfies")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token description string"}},[e._v('"""'),a("span",{pre:!0,attrs:{class:"token language-markdown"}},[e._v("\n    Provide the type of Yelfie to filter for.\n    e.g. “smilingFace”, “eatingFood”\n\n    The yelfieTypes are defined in the yelfie.json config file - see y/yelfie-type-docs\n    ")]),e._v('"""')]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("yelfieType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token scalar"}},[e._v("String")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Yelfie")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])])])]),e._v(" "),a("p",[e._v("When modelling complex business objects, usually just a brief summary and a link\nto find more will suffice.")]),e._v(" "),a("h2",{attrs:{id:"use-nullable-for-most-object-fields-by-default-but-there-are-many-exceptions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use-nullable-for-most-object-fields-by-default-but-there-are-many-exceptions"}},[e._v("#")]),e._v(" Use nullable for most object fields by default, but there are many exceptions")]),e._v(" "),a("p",[a("em",[e._v("Refer to "),a("RouterLink",{attrs:{to:"/nullability.html"}},[e._v("Nullability")]),e._v(" for detailed recommendations.")],1)]),e._v(" "),a("p",[a("img",{attrs:{src:s(330),alt:"nullability diagram"}})])])}),[],!1,null,null,null);t.default=n.exports}}]);